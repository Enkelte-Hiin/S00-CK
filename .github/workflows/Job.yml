name: Python Script Execution

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-python-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          python -m pip install --upgrade pip
          pip install DrissionPage

      - name: Run the Python script
        run: |
          python - <<EOF
          import os
          from time import sleep
          from DrissionPage import ChromiumPage, ChromiumOptions
          from pathlib import Path

          class Serv00Crawler:
              def __init__(self):
                  # 设置浏览器选项
                  options = ChromiumOptions()
                  options.set_argument('--headless=new')
                  options.set_argument('--disable-blink-features=AutomationControlled')
                  options.set_argument('--lang=en-US')
                  options.set_argument('--disable-popup-blocking')
                  options.set_argument('--no-sandbox')
                  options.set_user_agent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36")

                  # 初始化浏览器
                  self.page = ChromiumPage(addr_or_opts=options)

              def handle_cloudflare(self):
                  """ 处理 Cloudflare 验证 """
                  if not self.page.wait.ele_loaded('iframe[src*="challenge"]', timeout=15):
                      return False

                  # 切换到 Cloudflare 挑战 iframe
                  challenge_frame = self.page.ele('iframe[src*="challenge"]')
                  if challenge_frame:
                      self.page.frame.to_frame(challenge_frame)

                  try:
                      verify_btn = self.page.ele('#cf-stage')
                      if verify_btn:
                          verify_btn.click()
                          print("点击 Cloudflare 验证按钮成功")

                      self.page.frame.to_main()
                      self.page.wait.load_start()

                      wait_elem = self.page.ele('div#cf-please-wait', timeout=5)
                      if wait_elem:
                          print("检测到二次验证，等待完成...")
                          wait_elem.wait.disappear(timeout=180)

                      return True
                  except Exception as e:
                      print(f"验证失败: {str(e)}")
                      return False

              def get_cookies(self):
                  """ 获取目标网站的 cookies """
                  try:
                      self.page.get(os.environ['SERV00_URL'])

                      # 处理可能的 Cloudflare 验证
                      if "challenges" in self.page.url:
                          print("检测到 Cloudflare 验证")
                          if not self.handle_cloudflare():
                              raise Exception("无法完成 Cloudflare 验证")

                      # 确保页面加载完成
                      self.page.wait.ele_loaded('input[name="username"]', timeout=30)

                      # 提取 cookies 并保存
                      cookies = self.page.cookies()
                      cookie_str = '\n'.join([f"{c['name']}={c['value']}" for c in cookies])
                      Path('serv00_cookies.txt').write_text(cookie_str)

                      return True
                  finally:
                      self.page.quit()

          if __name__ == '__main__':
              crawler = Serv00Crawler()
              if crawler.get_cookies():
                  print("Cookie 获取成功")
              else:
                  raise Exception("Cookie 获取失败")
          EOF

      - name: Upload Cookies
        uses: actions/upload-artifact@v4
        with:
          name: serv00-cookies
          path: serv00_cookies.txt
