name: Python 脚本执行

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-python-script:
    runs-on: ubuntu-latest
    env:
      pythonLocation: /opt/hostedtoolcache/Python/3.10.16/x64
      LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.16/x64/lib

    steps:
      # 1. 检出代码仓库
      - name: 检出代码仓库
        uses: actions/checkout@v2

      # 2. 设置 Python 3.10
      - name: 设置 Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # 3. 安装依赖
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          python -m pip install --upgrade pip
          pip install DrissionPage

      # 4. 运行 Python 脚本
      - name: 运行 Python 脚本
        shell: /usr/bin/bash -e {0}
        run: |
          python - <<EOF
          import os
          import re
          from time import sleep
          from DrissionPage import ChromiumPage, ChromiumOptions
          from pathlib import Path

          class Serv00Crawler:
              def __init__(self):
                  options = ChromiumOptions()
                  options.set_argument("--headless=new")
                  options.set_argument("--disable-blink-features=AutomationControlled")
                  options.set_argument("--lang=en-US")
                  options.set_argument("--disable-popup-blocking")
                  options.set_argument("--no-sandbox")
                  options.set_argument("--disable-dev-shm-usage")  # 避免共享内存问题
                  options.set_user_agent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36")
                  self.page = ChromiumPage(addr_or_opts=options)

              def handle_cloudflare(self):
                  print(f"当前 URL: {self.page.url}")
                  # 等待页面加载并检查 iframe
                  iframe = self.page.ele("iframe[src*=\"challenge\"]", timeout=30)
                  if not iframe:
                      print("未检测到 Cloudflare 挑战 iframe，可能已通过或页面未加载")
                      return True

                  print("检测到 Cloudflare 五秒盾，开始处理...")
                  self.page.frame.to_frame(iframe)
                  try:
                      # 更精确地定位 checkbox
                      checkbox = self.page.ele("xpath://input[@type='checkbox']", timeout=20)
                      if not checkbox:
                          print("未找到 checkbox，尝试备用选择器...")
                          checkbox = self.page.ele("css:input", timeout=10)  # 宽泛选择所有 input

                      if checkbox:
                          print(f"找到 checkbox: {checkbox.attrs}")
                          if checkbox.visible:
                              checkbox.click()
                              print("成功点击 checkbox")
                          else:
                              print("checkbox 不可见，无法点击")
                              return False
                      else:
                          print("未找到任何 checkbox")
                          return False

                      # 等待验证完成
                      self.page.frame.to_main()
                      sleep(5)  # 等待页面响应点击
                      wait_elem = self.page.ele("css:#cf-please-wait", timeout=20)
                      if wait_elem:
                          print("检测到 'Please Wait'，等待消失...")
                          wait_elem.wait.disappear(timeout=60)
                          sleep(5)

                      # 检查是否仍停留在挑战页面
                      if "challenges" in self.page.url:
                          print("仍未通过 Cloudflare 验证")
                          return False
                      print("Cloudflare 验证通过")
                      return True
                  except Exception as e:
                      print(f"处理 Cloudflare 失败: {str(e)}")
                      return False
                  finally:
                      self.page.frame.to_main()

              def get_cookies(self):
                  success = False
                  try:
                      self.page.get("https://www.serv00.com/offer/create_new_account")
                      print(f"初始 URL: {self.page.url}")
                      sleep(5)  # 初始加载等待

                      # 处理 Cloudflare
                      if "challenges" in self.page.url or "verify" in self.page.html.lower():
                          if not self.handle_cloudflare():
                              raise Exception("无法通过 Cloudflare 验证")

                      sleep(10)  # 等待页面跳转
                      print(f"最终 URL: {self.page.url}")
                      html_content = self.page.html
                      print(f"页面内容长度: {len(html_content)} 字节")

                      # 保存截图和 HTML
                      screenshot_path = Path("screenshot.png")
                      try:
                          self.page.get_screenshot(path=str(screenshot_path))
                          print(f"已保存截图到: {screenshot_path}")
                      except Exception as e:
                          print(f"截图失败: {str(e)}")

                      Path("page_content.html").write_text(html_content)

                      # 检查目标页面
                      if re.search(r"Create an account", html_content, re.IGNORECASE):
                          print("成功到达目标页面，找到 'Create an account'")
                      else:
                          print("未找到 'Create an account'，可能未通过验证")
                          return False

                      # 获取并保存 cookies
                      cookies = self.page.cookies()
                      if not cookies:
                          print("未获取到 cookies")
                          return False

                      cookie_str = "\n".join([c["name"] + "=" + c["value"] for c in cookies])
                      print(f"获取到的 cookies:\n{cookie_str}")
                      Path("serv00_cookies.txt").write_text(cookie_str)
                      success = True
                      return True
                  except Exception as e:
                      print(f"获取 cookies 失败: {str(e)}")
                      return False
                  finally:
                      if not success:
                          Path("page_content.html").write_text(self.page.html)
                      self.page.quit()

          if __name__ == "__main__":
              crawler = Serv00Crawler()
              if crawler.get_cookies():
                  print("Cookie 获取成功")
              else:
                  raise Exception("Cookie 获取失败")
          EOF

      # 5. 上传结果文件
      - name: 上传 Cookies 文件和截图
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: serv00-output
          path: |
            serv00_cookies.txt
            screenshot.png
            page_content.html
