name: Get Serv00 Cookies

on:
  push:
    branches:
      - main
  workflow_dispatch:  # 允许手动触发

jobs:
  get-cookies:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 安装依赖
        run: |
          pip install DrissionPage

      - name: 运行 Serv00 爬虫获取 Cookies
        env:
          SERV00_URL: "https://www.serv00.com/offer/create_new_account"
        run: |
          python - <<EOF
          import os
          from time import sleep
          from DrissionPage import ChromiumPage, SessionOptions
          from pathlib import Path

          class Serv00Crawler:
              def __init__(self):
                  options = SessionOptions()
                  options.set_browser_argument('--headless=new')
                  options.set_browser_argument('--disable-blink-features=AutomationControlled')
                  options.set_browser_argument('--lang=en-US')
                  options.set_browser_argument('--disable-popup-blocking')

                  self.page = ChromiumPage(session_options=options)
                  self.page.set_user_agent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36")

              def handle_cloudflare(self):
                  if not self.page.wait.ele_loaded('iframe[src*="challenge"]', timeout=15):
                      return False
                  
                  challenge_frame = self.page.ele('iframe[src*="challenge"]')
                  if challenge_frame:
                      self.page.frame.to_frame(challenge_frame)

                  try:
                      verify_btn = self.page.ele('#cf-stage')
                      if verify_btn:
                          verify_btn.click()
                          print("点击 Cloudflare 验证按钮成功")

                      self.page.frame.to_main()
                      self.page.wait.load_start()

                      wait_elem = self.page.ele('div#cf-please-wait', timeout=5)
                      if wait_elem:
                          print("检测到二次验证，等待完成...")
                          wait_elem.wait.disappear(timeout=180)

                      return True
                  except Exception as e:
                      print(f"验证失败: {str(e)}")
                      return False

              def get_cookies(self):
                  try:
                      self.page.get(os.environ['SERV00_URL'])

                      if "challenges" in self.page.url:
                          print("检测到 Cloudflare 验证")
                          if not self.handle_cloudflare():
                              raise Exception("无法完成 Cloudflare 验证")

                      self.page.wait.ele_loaded('input[name="username"]', timeout=30)

                      cookies = self.page.cookies()
                      cookie_str = '\n'.join([f"{c['name']}={c['value']}" for c in cookies])
                      Path('serv00_cookies.txt').write_text(cookie_str)

                      return True
                  finally:
                      self.page.quit()

          if __name__ == '__main__':
              crawler = Serv00Crawler()
              if crawler.get_cookies():
                  print("Cookie 获取成功")
              else:
                  raise Exception("Cookie 获取失败")
          EOF

      - name: 上传 Cookies 作为 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: serv00_cookies
          path: serv00_cookies.txt
