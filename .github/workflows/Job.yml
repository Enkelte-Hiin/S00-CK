name: Python 脚本执行

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-python-script:
    runs-on: ubuntu-latest
    env:
      pythonLocation: /opt/hostedtoolcache/Python/3.10.16/x64
      LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.16/x64/lib

    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v2

      - name: 设置 Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          python -m pip install --upgrade pip
          pip install DrissionPage

      - name: 运行 Python 脚本
        shell: /usr/bin/bash -e {0}
        run: |
          python - <<EOF
          import os
          import re
          from time import sleep
          from DrissionPage import ChromiumPage, ChromiumOptions
          from pathlib import Path

          class Serv00Crawler:
              def __init__(self):
                  options = ChromiumOptions()
                  options.set_argument("--headless=new")
                  options.set_argument("--disable-blink-features=AutomationControlled")
                  options.set_argument("--lang=en-US")
                  options.set_argument("--disable-popup-blocking")
                  options.set_argument("--no-sandbox")
                  options.set_user_agent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36")
                  self.page = ChromiumPage(addr_or_opts=options)

              def handle_cloudflare(self):
                  if not self.page.ele("iframe[src*=\"challenge\"]", timeout=15):
                      print("未检测到 Cloudflare 挑战")
                      return True
                  print("检测到 Cloudflare 五秒盾，开始处理...")
                  challenge_frame = self.page.ele("iframe[src*=\"challenge\"]")
                  if challenge_frame:
                      self.page.frame.to_frame(challenge_frame)
                  try:
                      checkbox = self.page.ele("input[type=\"checkbox\"]", timeout=10)
                      if checkbox:
                          checkbox.click()
                          print("点击验证码 checkbox 成功")
                      else:
                          print("未找到验证码 checkbox")
                      self.page.frame.to_main()
                      self.page.wait.load_start()
                      wait_elem = self.page.ele("div#cf-please-wait", timeout=10)
                      if wait_elem:
                          print("检测到二次验证，等待完成...")
                          wait_elem.wait.disappear(timeout=30)
                      sleep(5)
                      if "challenges" in self.page.url:
                          print("仍处于 Cloudflare 挑战页面")
                          return False
                      return True
                  except Exception as e:
                      print(f"Cloudflare 验证失败: {str(e)}")
                      return False
                  finally:
                      self.page.frame.to_main()

              def get_cookies(self):
                  try:
                      self.page.get("https://www.serv00.com/offer/create_new_account")
                      print(f"当前 URL: {self.page.url}")
                      if "challenges" in self.page.url:
                          if not self.handle_cloudflare():
                              raise Exception("无法完成 Cloudflare 验证")
                      sleep(10)  # 等待页面加载
                      html_content = self.page.html
                      print(f"页面内容长度: {len(html_content)} 字节")
                      # 保存截图以调试
                      screenshot_path = Path("screenshot.png")
                      self.page.screenshot(path=str(screenshot_path))
                      print(f"已保存页面截图到: {screenshot_path}")
                      if re.search(r"Create an account", html_content):
                          print("成功跳转到目标页面，找到 'Create an account'")
                      else:
                          print("未找到 'Create an account'，可能未跳转到目标页面")
                          return False
                      cookies = self.page.cookies()
                      if not cookies:
                          print("未获取到任何 cookies")
                          return False
                      cookie_str = "\n".join([c["name"] + "=" + c["value"] for c in cookies])
                      print(f"获取到的 cookies:\n{cookie_str}")
                      Path("serv00_cookies.txt").write_text(cookie_str)
                      return True
                  except Exception as e:
                      print(f"获取 cookies 失败: {str(e)}")
                      return False
                  finally:
                      self.page.quit()

          if __name__ == "__main__":
              crawler = Serv00Crawler()
              if crawler.get_cookies():
                  print("Cookie 获取成功")
              else:
                  raise Exception("Cookie 获取失败")
          EOF

      - name: 上传 Cookies 文件和截图
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: serv00-output
          path: |
            serv00_cookies.txt
            screenshot.png
