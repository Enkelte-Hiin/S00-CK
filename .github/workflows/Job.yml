name: Python 脚本执行

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-python-script:
    runs-on: ubuntu-latest
    env:
      pythonLocation: /opt/hostedtoolcache/Python/3.10.16/x64
      LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.16/x64/lib

    steps:
      # 1. 检出代码仓库
      - name: 检出代码仓库
        uses: actions/checkout@v2

      # 2. 设置 Python 3.10
      - name: 设置 Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # 3. 安装依赖
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          python -m pip install --upgrade pip
          pip install DrissionPage

      # 4. 运行 Python 脚本
      - name: 运行 Python 脚本
        shell: /usr/bin/bash -e {0}
        run: |
          python - <<EOF
          import os
          import re
          from time import sleep
          from DrissionPage import ChromiumPage, ChromiumOptions
          from pathlib import Path

          class Serv00Crawler:
              def __init__(self):
                  options = ChromiumOptions()
                  options.set_argument("--headless=new")
                  options.set_argument("--disable-blink-features=AutomationControlled")
                  options.set_argument("--lang=en-US")
                  options.set_argument("--disable-popup-blocking")
                  options.set_argument("--no-sandbox")
                  options.set_argument("--disable-dev-shm-usage")
                  options.set_argument("--window-size=1920,1080")
                  options.set_argument("--disable-gpu")
                  options.set_argument("--enable-features=NetworkService,NetworkServiceInProcess")
                  options.set_argument("--ignore-certificate-errors")
                  options.set_argument("--disable-web-security")
                  options.set_argument("--allow-running-insecure-content")
                  options.set_user_agent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36")
                  self.page = ChromiumPage(addr_or_opts=options)

              def handle_cloudflare(self):
                  print(f"当前 URL: {self.page.url}")
                  html_content = self.page.html.lower()

                  # 检查是否为 Cloudflare/Turnstile 验证页面
                  if "verify you are human" in html_content or "cloudflare" in html_content or "cf-turnstile" in html_content:
                      print("检测到 Cloudflare/Turnstile 验证，开始处理...")
                      sleep(20)  # 等待页面和脚本加载

                      # 动态获取 sitekey
                      sitekey = None
                      try:
                          sitekey_script = self.page.run_js("""
                              return window._cf_chl_opt?.chlApiSitekey || null;
                          """, timeout=20)
                          sitekey = sitekey_script or "0x4AAAAAAAAjq6WYeRDKmebM"
                          print(f"获取到的 sitekey: {sitekey}")
                      except Exception as e:
                          print(f"获取 sitekey 失败: {str(e)}，使用默认值")
                          sitekey = "0x4AAAAAAAAjq6WYeRDKmebM"

                      # 确保 turnstile 可用
                      for _ in range(3):
                          turnstile_available = self.page.run_js("return typeof window.turnstile !== 'undefined';", timeout=20)
                          if turnstile_available:
                              break
                          print("Turnstile 未加载，等待重试...")
                          sleep(10)

                      if not turnstile_available:
                          print("Turnstile 加载失败，保存页面内容以供调试")
                          Path("debug_turnstile_load.html").write_text(self.page.html)
                          return False

                      # 手动触发 Turnstile 渲染
                      try:
                          self.page.run_js(f"""
                              if (window.turnstile) {{
                                  turnstile.render('#uATa8', {{
                                      sitekey: '{sitekey}',
                                      callback: function(token) {{
                                          document.querySelector('#cf-chl-widget-7oz3q_response').value = token;
                                      }}
                                  }});
                              }}
                          """, timeout=20)
                          print("已调用 turnstile.render()，等待渲染...")
                          sleep(30)  # 延长等待时间，确保渲染完成
                      except Exception as e:
                          print(f"调用 turnstile.render() 失败: {str(e)}")
                          Path("debug_render.html").write_text(self.page.html)
                          return False

                      # 等待 Turnstile 元素或 iframe 出现
                      turnstile_container = None
                      for _ in range(3):  # 尝试 3 次
                          turnstile_container = self.page.ele("xpath://div[contains(@class, 'cf-turnstile')]", timeout=20)
                          if turnstile_container:
                              break
                          print("未找到 Turnstile 容器，等待重试...")
                          sleep(10)

                      if not turnstile_container:
                          print("未找到 Turnstile 容器，尝试检查 iframe...")
                          turnstile_iframe = self.page.ele("xpath://iframe[contains(@src, 'challenges.cloudflare.com')]", timeout=20)
                          if turnstile_iframe:
                              print("找到 Turnstile iframe，切换上下文...")
                              self.page.frame.to_frame(turnstile_iframe)
                              turnstile_container = self.page.ele("xpath://div[contains(@class, 'cf-turnstile')]", timeout=20)
                              self.page.frame.to_main()

                      if turnstile_container:
                          print(f"找到 Turnstile 容器: {turnstile_container.attrs}")
                          try:
                              # 模拟鼠标点击
                              self.page.run_js("""
                                  var element = document.querySelector('.cf-turnstile');
                                  if (element) {
                                      var rect = element.getBoundingClientRect();
                                      var x = rect.left + (rect.width / 2);
                                      var y = rect.top + (rect.height / 2);
                                      var clickEvent = new MouseEvent('click', {
                                          view: window,
                                          bubbles: true,
                                          cancelable: true,
                                          clientX: x,
                                          clientY: y
                                      });
                                      element.dispatchEvent(clickEvent);
                                  }
                              """, timeout=10)
                              print("通过 JavaScript 模拟鼠标点击 Turnstile 容器")
                              sleep(20)  # 等待验证完成
                          except Exception as e:
                              print(f"JavaScript 点击失败: {str(e)}")
                              return False
                      else:
                          print("未找到 Turnstile 容器或 iframe，保存页面内容以供调试")
                          Path("debug_page.html").write_text(self.page.html)
                          return False

                      # 检查 token 是否已写入
                      token = self.page.run_js("return document.querySelector('#cf-chl-widget-7oz3q_response').value;", timeout=10)
                      if token:
                          print(f"Turnstile 验证 token 已生成: {token}")
                      else:
                          print("未生成 Turnstile 验证 token")
                          return False

                      # 等待验证完成
                      wait_elem = self.page.ele("css:#cf-please-wait", timeout=30)
                      if wait_elem:
                          print("检测到 'Please Wait'，等待消失...")
                          wait_elem.wait.disappear(timeout=60)
                          sleep(5)

                      # 检查是否仍停留在挑战页面
                      if "verify you are human" in self.page.html.lower():
                          print("仍未通过 Cloudflare/Turnstile 验证")
                          return False
                      print("Cloudflare/Turnstile 验证通过")
                      return True
                  else:
                      print("未检测到 Cloudflare/Turnstile 验证，可能是目标页面")
                      return True

              def get_cookies(self):
                  success = False
                  try:
                      self.page.get("https://www.serv00.com/offer/create_new_account")
                      print(f"初始 URL: {self.page.url}")
                      sleep(5)  # 初始加载等待

                      # 处理 Cloudflare/Turnstile
                      if not self.handle_cloudflare():
                          raise Exception("无法通过 Cloudflare/Turnstile 验证")

                      sleep(10)  # 等待页面跳转
                      print(f"最终 URL: {self.page.url}")
                      html_content = self.page.html
                      print(f"页面内容长度: {len(html_content)} 字节")

                      # 保存截图和 HTML
                      screenshot_path = Path("screenshot.png")
                      try:
                          self.page.get_screenshot(path=str(screenshot_path))
                          print(f"已保存截图到: {screenshot_path}")
                      except Exception as e:
                          print(f"截图失败: {str(e)}")

                      Path("page_content.html").write_text(html_content)

                      # 检查目标页面
                      if re.search(r"Create an account", html_content, re.IGNORECASE):
                          print("成功到达目标页面，找到 'Create an account'")
                      else:
                          print("未找到 'Create an account'，可能未通过验证")
                          return False

                      # 获取并保存 cookies
                      cookies = self.page.cookies()
                      if not cookies:
                          print("未获取到 cookies")
                          return False

                      cookie_str = "\n".join([c["name"] + "=" + c["value"] for c in cookies])
                      print(f"获取到的 cookies:\n{cookie_str}")
                      Path("serv00_cookies.txt").write_text(cookie_str)
                      success = True
                      return True
                  except Exception as e:
                      print(f"获取 cookies 失败: {str(e)}")
                      return False
                  finally:
                      if not success:
                          Path("page_content.html").write_text(self.page.html)
                      self.page.quit()

          if __name__ == "__main__":
              crawler = Serv00Crawler()
              if crawler.get_cookies():
                  print("Cookie 获取成功")
              else:
                  raise Exception("Cookie 获取失败")
          EOF

      # 5. 上传结果文件
      - name: 上传 Cookies 文件和截图
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: serv00-output
          path: |
            serv00_cookies.txt
            screenshot.png
            page_content.html
            debug_page.html
            debug_render.html
            debug_turnstile_load.html
